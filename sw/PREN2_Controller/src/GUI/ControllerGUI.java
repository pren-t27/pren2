package GUI;

import Calculation.Berechnung;
import Calculation.Erkennung;
import Calculation.ImgColorChanger;
import Calculation.ImgMidGetter;
import ch.hslu.pren.bluetooth.control.BluetoothController;
import ch.hslu.pren.bluetooth.events.BluetoothReceiverListener;
import imagegetter.ImageHandler;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import jssc.SerialPort;
import jssc.SerialPortException;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import static org.opencv.imgcodecs.Imgcodecs.imencode;
import org.opencv.imgproc.Imgproc;
import org.opencv.core.Point;
import static org.opencv.imgproc.Imgproc.getRotationMatrix2D;
import static org.opencv.imgproc.Imgproc.warpAffine;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Slade
 */
public class ControllerGUI extends javax.swing.JFrame implements BluetoothReceiverListener {

    ImageHandler imgHandler = new ImageHandler();
    private final MouseAdapter mouseHandler;
    java.awt.Point click_point, release_point;

    Point sub_topLeft, sub_bottomRight;

    Mat imgFromCam;
    Mat backgroundSubMat;

    private SerialPort serialPort;
    BluetoothController btController;
    Thread receiverThread;

    private void translatePoints(java.awt.Point click, java.awt.Point release) {
        sub_topLeft = new Point(click.x * 2, click.y * 2);
        sub_bottomRight = new Point(release.x * 2, release.y * 2);
    }

    private Mat turnMat(Mat inputMat) {
        Point src_center = new Point(inputMat.cols() / 2, inputMat.rows() / 2);
        Mat rot_mat = getRotationMatrix2D(src_center, 180, 1.0);
        Mat dst = new Mat();
        warpAffine(inputMat, dst, rot_mat, inputMat.size());

        return dst;
    }

    /**
     * Creates new form ControllerGUI
     */
    public ControllerGUI() {

        this.mouseHandler = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                click_point = e.getPoint();
                System.out.println(click_point);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                release_point = e.getPoint();
                System.out.println(release_point);

                //Jpanel auf Bildgr√∂sse anpassen...
                translatePoints(click_point, release_point);
            }
        };

        initComponents();
        String os = "os.name";

        Properties prop = System.getProperties();
        String actualOS = prop.getProperty(os);
        System.out.println(actualOS);

        if (actualOS.contains("Windows")) {
            portList.setListData(BluetoothController.getWindowsPortNames());
        } else {
            portList.setListData(BluetoothController.getMacOSXPortNames());
        }

        btController = new BluetoothController();

        jPanelImage.addMouseListener(mouseHandler);

        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        portList = new javax.swing.JList();
        txtFldCommand = new javax.swing.JTextField();
        jPanelImage = new javax.swing.JPanel();
        jButtonGetImage = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaReceived = new ch.hslu.pren.bluetooth.view.JReceiverTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        portList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        portList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                portListKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(portList);

        txtFldCommand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFldCommandKeyPressed(evt);
            }
        });

        jPanelImage.setBackground(new java.awt.Color(255, 102, 51));
        jPanelImage.setMaximumSize(new java.awt.Dimension(640, 480));
        jPanelImage.setMinimumSize(new java.awt.Dimension(640, 480));
        jPanelImage.setPreferredSize(new java.awt.Dimension(640, 480));

        javax.swing.GroupLayout jPanelImageLayout = new javax.swing.GroupLayout(jPanelImage);
        jPanelImage.setLayout(jPanelImageLayout);
        jPanelImageLayout.setHorizontalGroup(
            jPanelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        jPanelImageLayout.setVerticalGroup(
            jPanelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        jButtonGetImage.setText("jButton1");
        jButtonGetImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetImageActionPerformed(evt);
            }
        });

        jButton2.setText("jButton1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtAreaReceived.setColumns(20);
        txtAreaReceived.setRows(5);
        jScrollPane3.setViewportView(txtAreaReceived);

        jButton3.setText("s");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtFldCommand)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonGetImage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanelImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonGetImage)
                            .addComponent(jButton2)
                            .addComponent(jButton3)))
                    .addComponent(jPanelImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(txtFldCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGetImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetImageActionPerformed

        imgFromCam = imgHandler.getImage();

        imgFromCam = turnMat(imgFromCam);

        Graphics g = jPanelImage.getGraphics();

        g.drawImage(encodeImage(imgFromCam), 0, 0, jPanelImage.getWidth(), jPanelImage.getHeight(), this);
    }//GEN-LAST:event_jButtonGetImageActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Mat currentImage = imgHandler.getImage();

        currentImage = turnMat(currentImage);
        //Ben√∂tigt um den Schwarzen Rand um das Submat zu zeichnen. Anosonsten wird das "lastX" nicht gefunden im ImgMidGetter...
        Imgproc.rectangle(currentImage, sub_topLeft, sub_bottomRight, new Scalar(30, 30, 30), 3);

        Graphics g = jPanelImage.getGraphics();
        g.drawImage(encodeImage(currentImage), 0, 0, jPanelImage.getWidth(), jPanelImage.getHeight(), this);

        Rect tmpl_rect = new Rect(sub_topLeft, sub_bottomRight);
        backgroundSubMat = currentImage.submat(tmpl_rect);

        Erkennung erkenner = new Erkennung();
        erkenner.processFrame(backgroundSubMat);

        double winkel = erkenner.processFrame(backgroundSubMat);
        double ticks = 341.111 * winkel;
        if (winkel > 16) {
            ticks = ticks + 380;
        }
        if (winkel < -16) {
            ticks = ticks - 380;
        }

        try {
            if (winkel > 0) {
                btController.turnLeft((int) ticks);
            } else {
                ticks = ticks * -1;
                btController.turnRight((int) ticks);
            }
        } catch (SerialPortException ex) {
            ex.printStackTrace();
            System.out.println("Y U NO WORK TICKS??");
        }
        System.out.println(ticks);
        System.out.println();

        try {
            Thread.sleep((long) ticks / 20);
        } catch (InterruptedException ex) {
            Logger.getLogger(ControllerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            btController.shoot();
        } catch (SerialPortException ex) {
            Logger.getLogger(ControllerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void portListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_portListKeyPressed
        if (evt.getKeyCode() == 10) {
            System.out.println("Connecting to " + portList.getSelectedValue().toString());
            try {
                btController.initConnections(portList.getSelectedValue().toString());
                System.out.println(txtAreaReceived.getText());
                btController.addBluetoothReceiverListener(txtAreaReceived);
                btController.addBluetoothReceiverListener(this);
            } catch (SerialPortException e1) {
                e1.printStackTrace();
            }
        }
    }//GEN-LAST:event_portListKeyPressed

    private void txtFldCommandKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFldCommandKeyPressed
        if (evt.getKeyCode() == 10 && btController.getConnectionStatus()) {
            try {
                btController.sendCommandToDevice(txtFldCommand.getText());
                txtFldCommand.setText("");
            } catch (SerialPortException e1) {
                e1.printStackTrace();
            }
            System.out.println();
        }
    }//GEN-LAST:event_txtFldCommandKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            btController.shoot();
        } catch (SerialPortException ex) {
            ex.printStackTrace();
            System.out.println("Shoot is h√§√§√§√§nging");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public BufferedImage encodeImage(Mat pImage) {
        MatOfByte mem = new MatOfByte();
        try {
            imencode(".bmp", pImage, mem);
            Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));
            return ((BufferedImage) im);
        } catch (Exception ex) {
            ex.getMessage();
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControllerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new ControllerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonGetImage;
    private javax.swing.JPanel jPanelImage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList portList;
    private ch.hslu.pren.bluetooth.view.JReceiverTextArea txtAreaReceived;
    private javax.swing.JTextField txtFldCommand;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onBluetoothMessageReceived(String string) {
        System.out.println(string);
        if (string.contains("fin")) {
            System.out.println("shoot finished");
            try {
                Thread.sleep(300);
            } catch (InterruptedException ex) {
                Logger.getLogger(ControllerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                btController.sendCommandToDevice("BLDC sound\n");
            } catch (SerialPortException ex) {
                ex.printStackTrace();
            }
        }
    }
}
